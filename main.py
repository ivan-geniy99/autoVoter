from telethon import TelegramClient
import asyncio
import os
from datetime import datetime
from flask import Flask, request
from threading import Thread
import nest_asyncio
import requests
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError, PhoneCodeExpiredError

nest_asyncio.apply()

api_id = 24915095
api_hash = "abad68fdf249153b744a7bd0e6ffd528"
phone = "+79954879633"

client = TelegramClient('anon', api_id, api_hash)

vote_params = [
    'vote_-1002366046946',
]

GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbxh_gh1s8ZxGzHOXCTWHUNnexw6kaAgHefPHEKo70oUGwg2F5rfO5Jy6yJyhErGqmR5/exec"

def send_to_google_script(messages):
    try:
        payload = {"messages": messages}
        response = requests.post(GOOGLE_SCRIPT_URL, json=payload)
        print(f"[{datetime.now()}] üì¨ POST –≤ Google Script: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Script: {e}")

async def send_votes():
    await client.connect()
    if not await client.is_user_authorized():
        return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /auth –¥–ª—è –≤—Ö–æ–¥–∞."

    print(f"[{datetime.now()}] ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

    bot_username = 'BBTrendingBot'
    messages_log = []

    for param in vote_params:
        command = f'/start {param}'
        await client.send_message(bot_username, command)
        log = f"[{datetime.now()}] üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}"
        print(log)
        messages_log.append(log)

    await client.disconnect()
    send_to_google_script(messages_log)

    return "‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"

# Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def index():
    return "üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω"

@app.route('/vote')
def trigger_vote():
    try:
        loop = asyncio.get_event_loop()
        result = loop.run_until_complete(send_votes())
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

@app.route('/auth', methods=["GET", "POST"])
def auth():
    async def send_code():
        await client.connect()
        return await client.send_code_request(phone)

    async def complete_sign_in(code):
        return await client.sign_in(phone=phone, code=code)

    try:
        loop = asyncio.get_event_loop()

        if request.method == "POST":
            code = request.form["code"]
            try:
                loop.run_until_complete(complete_sign_in(code))
                return "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!"
            except PhoneCodeInvalidError:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            except PhoneCodeExpiredError:
                return "‚åõ –ö–æ–¥ –∏—Å—Ç—ë–∫. –ü–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."

        # GET-–∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
        try:
            loop.run_until_complete(send_code())
            msg = "üì© –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:"
        except Exception as e:
            msg = f"‚ö†Ô∏è –ö–æ–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ: ({e})"

        return f'''
            <p>{msg}</p>
            <form method="POST">
                –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ Telegram: <input name="code" />
                <input type="submit" value="–í–æ–π—Ç–∏" />
            </form>
        '''

    except SessionPasswordNeededError:
        return "üîê –í—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

keep_alive()
